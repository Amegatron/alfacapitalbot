<?php
namespace Tests\Unit;

use App\Core\Logic\OpifLogic;
use App\Opif;
use App\OpifCourse;
use App\UserPifAmount;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class OpifLogicTest extends TestCase
{
    use DatabaseTransactions;

    /** @var OpifLogic */
    protected $logic;

    /** @var Opif */
    protected $opif;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->logic = $this->app->make(OpifLogic::class);
        $this->opif = Opif::create([
            'name' => 'Test OPIF',
            'fullName' => 'Test OPIF',
            'publicDataUrl' => 'https://www.alfacapital.ru/disclosure/pifs/opifa_akg/',
        ]);
    }

    //
    // setUserAmount tests
    //

    /** @test */
    public function a_logic_should_set_new_amount()
    {
        $userId = 100000;
        $amount = 100;
        $message = $this->logic->setUserAmount($userId, $this->opif->id, $amount);

        /** @var UserPifAmount $userAmount */
        $userAmount = UserPifAmount::where('user_id', '=', $userId)->where('opif_id', '=', $this->opif->id)->first();

        $this->assertNotNull($userAmount);
        $this->assertEquals($userAmount->amount, $amount);
        $this->assertContains("установлено", $message);
    }

    /** @test */
    public function a_logic_should_update_existing_amount()
    {
        $userId = 100000;
        $newAmount = 200;

        $userAmount = UserPifAmount::create([
            'user_id' => $userId,
            'opif_id' => $this->opif->id,
            'amount' => 100,
        ]);

        $message = $this->logic->setUserAmount($userId, $this->opif->id, $newAmount);

        /** @var UserPifAmount $userAmount */
        $userAmount = UserPifAmount::where('user_id', '=', $userId)->where('opif_id', '=', $this->opif->id)->first();

        $this->assertNotNull($userAmount);
        $this->assertEquals($userAmount->amount, $newAmount);
        $this->assertContains('обновлено', $message);
    }

    /** @test */
    public function a_logic_should_remove_existing_amount()
    {
        $userId = 100000;

        $userAmount = UserPifAmount::create([
            'user_id' => $userId,
            'opif_id' => $this->opif->id,
            'amount' => 100,
        ]);

        $message = $this->logic->setUserAmount($userId, $this->opif->id, 0);

        /** @var UserPifAmount $userAmount */
        $userAmount = UserPifAmount::where('user_id', '=', $userId)->where('opif_id', '=', $this->opif->id)->first();

        $this->assertNull($userAmount);
        $this->assertContains("удалены", $message);
    }

    /** @test */
    public function a_logic_should_not_do_anything()
    {
        $userId = 100000;

        $message = $this->logic->setUserAmount($userId, $this->opif->id, 0);

        /** @var UserPifAmount $userAmount */
        $userAmount = UserPifAmount::where('user_id', '=', $userId)->where('opif_id', '=', $this->opif->id)->first();

        $this->assertNull($userAmount);
        $this->assertContains("удалены", $message);
    }

    /** @test */
    public function a_logic_should_throw_exception_when_setting_amount()
    {
        $this->expectException(\Exception::class);
        $this->logic->setUserAmount(100000, 10, 100);
    }

    //
    // getUserOpifSummary tests
    //

    /** @test */
    public function a_logic_should_say_about_no_amounts()
    {
        $message = $this->logic->getUserOpifSummary(100000);

        $this->assertContains("не задан ни один ПИФ", $message);
    }

    /** @test */
    public function a_logic_should_inform_abount_amounts()
    {
        $userId = 100000;
        $course = 2500;
        $amount = 100;

        UserPifAmount::create([
            'user_id' => $userId,
            'opif_id' => $this->opif->id,
            'amount' => $amount,
        ]);

        OpifCourse::create([
            'date' => '25.03.2018',
            'opif_id' => $this->opif->id,
            'course' => $course,
        ]);

        $testAmount = $amount * $course;
        $testAmountStr = $testAmount . " руб.";

        $message = $this->logic->getUserOpifSummary($userId);
        $this->assertContains($this->opif->name . ": " . $testAmountStr, $message);
        $this->assertContains("Итого: " . $testAmountStr, $message);
    }
}